# exercise 3-10
#   The program prchecks does not deal with negative quantities or
#   very long amounts in a graceful way.  Modify the program to reject
#   requests for checks for negative amounts and to split very long
#   amounts onto two lines.
#
# prchecks - print formatted checks
#   input:  number \t amount \t payee
#   output: eight-nine lines of text for pre-printed check forms

BEGIN {
        FS = "\t"
        dashes = sp45 = sprintf("%45s", " ")
        gsub(/ /, "-", dashes)        # to protect the payee
        "date" | getline date         # get today's date
        split(date, d, " ")
        date = d[2] " " d[3] ", " d[6]
        initnum()       # set up tables for number conversion
      }

NF != 3 || $2 >= 1000000 || $2 < 0  {           # illegal data
        printf("\nline %d illegal:\n%s\nVOID\n\n\n", NR, $0)
        next                          # no check printed
      }

      {
        printf("\n")                  # nothing on line 1
        printf("%s%s\n", sp45, $1)    # number, indented 45 spaces
        printf("%s%s\n", sp45, date)  # date, indented 45 spaces
        amt = addComma($2)            # formatted amount
        printf("Pay to %45.45s   $%s\n", $3 dashes, amt) # line 4
        gsub(/,/, "", amt)
        printf("the sum of %s\n", numtowords(amt))       # line 5
        printf("\n\n\n")              # lines 6, 7, and 8
      }

function numtowords(n, cents, dols) { # n has 2 decimal places
  cents = substr(n, length(n) - 1, 2)
  dols  = substr(n, 1, length(n) - 3)
  if (dols == 0) return "zero dollars and " cents " cents exactly"
  return wordbreak(intowords(dols) " dollars and " cents " cents exactly")
}

function intowords(n) {
  n = int(n)
  if (n >= 1000) return intowords(n / 1000) " thousand " intowords(n % 1000)
  if (n >= 100) return intowords(n / 100) " hundred " intowords(n % 100)
  if (n >= 20) return tens[int(n / 10)] " " intowords(n % 10)
  return nums[n]
}

function initnum() {
  split("one two three four five six seven eight nine " \
        "ten eleven twelve thirteen fourteen fifteen " \
        "sixteen seventeen eighteen nineteen", nums, " ")
  split("ten twenty thirty forty fifty sixty " \
        "seventy eighty ninety", tens, " ")
}

function addComma(x, num) {
  if (x < 0)
    return "-" addComma(-x)
  num = sprintf("%.2f", x)
  while (num ~ /[0-9]{4}/)
    sub(/[0-9]{3}[,.]/, ",&", num)
  return num
}

function wordbreak(text) {
  newText = ""
  split(text, words, " ")
  for (i = 1; i < length(words) + 1; i++) {
    if (i % 5 == 0) {
      newText = newText words[i] "\n "
    } else {
      newText = newText words[i] " "
    }
  }
  return newText
}
